{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"WebTool(Alpha)","text":"<p>WebTool is Well-Architected FastAPI/Starlette library for authentication, throttling, caching, logging, and utilities.</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.11+</li> </ul>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install webtool\n</code></pre> <pre><code>poetry add webtool\n</code></pre>"},{"location":"#features","title":"Features","text":""},{"location":"#authentication","title":"Authentication","text":"<p>JWT token management system with Redis-backed refresh tokens.</p> <pre><code>from webtool.auth import JWTService\nfrom webtool.cache import RedisCache\n\ncache_client = RedisCache(\"redis://localhost:6379/0\")\njwt_service = JWTService(cache_client)\n\n\nasync def get_token():\n    access_token = jwt_service.create_access_token({\"sub\": 123, \"scope\": [\"write\"]})\n    refresh_token = await jwt_service.create_refresh_token({\"sub\": 123}, access_token)\n    return access_token, refresh_token\n</code></pre>"},{"location":"#throttling","title":"Throttling","text":"<p>Rate limiting system for FastAPI/Starlette applications.</p> <pre><code>from fastapi import FastAPI\nfrom starlette.middleware import Middleware\nfrom webtool.auth import JWTService\nfrom webtool.cache import RedisCache\nfrom webtool.throttle import limiter, LimitMiddleware, JWTBackend\n\ncache = RedisCache(\"redis://127.0.0.1:6379/0\")\njwt_backend = JWTBackend(JWTService(cache, secret_key=\"test\"))\n\napp = FastAPI(\n    middleware=[\n        Middleware(\n            LimitMiddleware,\n            cache=cache,\n            auth_backend=jwt_backend,\n        ),\n    ],\n)\n\n\n@app.get(\"/api/resource\")\n@limiter(max_requests=50, interval=3600, scope=[\"user\"])\n@limiter(max_requests=10, interval=3600, scope=[\"anno\"])\nasync def get_resource():\n    return {\"status\": \"success\"}\n</code></pre>"},{"location":"#msgpack-response","title":"MsgPack Response","text":"<p>MessagePack-based response.</p> <pre><code>from webtool.utils import MsgSpecJSONResponse\nfrom fastapi import FastAPI\n\napp = FastAPI(\n    default_response_class=MsgSpecJSONResponse,\n)\n\n\n@app.get(\"/api/resource\")\nasync def get_resource():\n    return {\"status\": \"success\"}\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the Apache-2.0 License.</p>"},{"location":"modules/manager/","title":"Auth - manager","text":"<p>This module provides functionality for handling JSON Web Tokens (JWT) for authentication and authorization. It defines the structure and methods required to encode and decode JWTs, as well as manage the claims associated with the tokens.</p>"},{"location":"modules/manager/#tokendata-class","title":"TokenData Class","text":"<p>The <code>TokenData</code> class represents the claims embedded in a JWT. It is a typed dictionary (<code>TypedDict</code>) that ensures type safety when working with JWTs.</p> <pre><code>class TokenData(TypedDict):\n    sub: str\n    exp: float\n    iat: float\n    jti: str\n    scope: NotRequired[list[str]]\n</code></pre> <p>Field Descriptions:</p> <ul> <li><code>sub</code>: Unique identifier for the subject.</li> <li><code>exp</code>: Expiration time (defaults if not provided).</li> <li><code>iat</code>: Issued at time (defaults if not provided).</li> <li><code>jti</code>: JWT ID (defaults if not provided).</li> <li><code>scope</code>: Optional list of scopes for fine-grained access control.</li> </ul>"},{"location":"modules/manager/#basejwtmanager-class","title":"BaseJWTManager Class","text":"<p>Abstract base class for managing JWTs, defining the interface for encoding and decoding JWTs.</p> <p>Methods:</p> <ul> <li> <p><code>encode(claims, secret_key, algorithm, access_token) -&gt; str</code> Encodes claims into a JWT.</p> </li> <li> <p><code>decode(token, secret_key, algorithm, access_token) -&gt; str</code> Decodes and validates a JWT.</p> </li> </ul>"},{"location":"modules/manager/#jwtmanager-class","title":"JWTManager Class","text":"<p>JWTManager is an implementation of 'BaseJWTManager' using python-jose. responsible for encoding and decoding JSON Web Tokens (JWT). The JWTManager class follows the Apache Software Foundation (ASF) coding style guidelines, providing clear and concise documentation for its methods and parameters.</p> <ul> <li> <p><code>encode(claims, secret_key, algorithm, access_token) -&gt; str</code> This method takes the JWT claims, secret key, signing algorithm, and an optional access token parameter, and returns the encoded JWT string.</p> </li> <li> <p><code>decode(token, secret_key, algorithm, access_token) -&gt; str</code>: This method takes the JWT token string, secret key, signing algorithm, and an optional access token parameter, and returns the decoded claims if the token is valid, or None if the token is invalid or expired.</p> </li> </ul>"},{"location":"modules/manager/#usage","title":"Usage","text":"<p>In most cases, JWTManager is not used directly</p> <pre><code>from webtool.auth import JWTManager\n\nmanager = JWTManager()\n\naccess_token = manager.encode({\n    \"sub\": \"1\", \n    \"exp\": 1, \n    \"iat\": 123, \n    \"jti\": \"abc\",\n    \"scope\": [\"user\"]\n}, secret_key=\"your_secret_key\", algorithm='HS256')\n</code></pre>"},{"location":"modules/service/","title":"Auth - service","text":""},{"location":"modules/service/#jwtservice","title":"JWTService","text":"<p>The <code>JWTService</code> class is responsible for generating and managing access tokens and refresh tokens using JSON Web Tokens (JWT). It provides an abstraction layer over the <code>BaseJWTManager</code> implementation, which is responsible for encoding and decoding the JWT tokens.</p>"},{"location":"modules/service/#parameters","title":"Parameters","text":"<p>The <code>JWTService</code> class can be instantiated with the following parameters:</p> <ul> <li><code>cache</code>: An instance of <code>BaseCache</code> that will be used to store the refresh tokens.</li> <li><code>jwt_manager</code>: An instance of <code>BaseJWTManager</code> (or its subclass <code>JWTManager</code>) that will be used for token encoding and decoding.</li> <li><code>secret_key</code>: The secret key used to sign the JWT tokens.</li> <li><code>algorithm</code>: The signing algorithm to use for the JWT tokens, defaults to 'HS384'.</li> <li><code>access_token_expire_time</code>: The expiration time for access tokens in seconds, defaults to 3600 (1 hour).</li> <li><code>refresh_token_expire_time</code>: The expiration time for refresh tokens in seconds, defaults to 604800 (1 week).</li> </ul>"},{"location":"modules/service/#features","title":"Features","text":"<ul> <li>Access Token Generation: The <code>JWTService</code> can create access tokens with a configurable expiration time.</li> <li>Refresh Token Generation: The service can create refresh tokens with a configurable expiration time and store them in a cache.</li> <li>Token Validation: The service can validate the access tokens and refresh tokens, checking for expiration and other token metadata.</li> <li>Token Refresh: The service can update the access token and refresh token when the refresh token is still valid.</li> </ul>"},{"location":"modules/service/#usage","title":"Usage","text":"<pre><code>from webtool.auth import JWTService\nfrom webtool.cache import RedisCache\n\ncache = RedisCache(\"redis://localhost:6379/0\")\njwt_service = JWTService(cache, secret_key=\"your_secret_key\")\n\n\nasync def get_token(data):\n    access_token = jwt_service.create_access_token(data)\n    refresh_token = await jwt_service.create_refresh_token(data, access_token)\n    return access_token, refresh_token\n\naccess, refresh = get_token({\"sub\": \"user123\", \"scope\": [\"write\"]})\n</code></pre>"}]}